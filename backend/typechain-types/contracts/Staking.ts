/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface StakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateReward"
      | "claimRewards"
      | "distributeRewards"
      | "getProjectStakers"
      | "getProjectTotalStaked"
      | "projectStakers"
      | "projects"
      | "stakeOnProject"
      | "stakingToken"
      | "totalStaked"
      | "userRewards"
      | "userStakes"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ProjectStaked"): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateReward",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectStakers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectTotalStaked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectStakers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "projects", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeOnProject",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakes",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectStakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectTotalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectStakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeOnProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStakes", data: BytesLike): Result;
}

export namespace ProjectStakedEvent {
  export type InputTuple = [
    staker: AddressLike,
    projectId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [staker: string, projectId: bigint, amount: bigint];
  export interface OutputObject {
    staker: string;
    projectId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Staking extends BaseContract {
  connect(runner?: ContractRunner | null): Staking;
  waitForDeployment(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateReward: TypedContractMethod<
    [user: AddressLike, projectId: BigNumberish],
    [bigint],
    "view"
  >;

  claimRewards: TypedContractMethod<[], [void], "nonpayable">;

  distributeRewards: TypedContractMethod<[], [void], "nonpayable">;

  getProjectStakers: TypedContractMethod<
    [_projectId: BigNumberish],
    [string[]],
    "view"
  >;

  getProjectTotalStaked: TypedContractMethod<
    [_projectId: BigNumberish],
    [bigint],
    "view"
  >;

  projectStakers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  projects: TypedContractMethod<[], [string], "view">;

  stakeOnProject: TypedContractMethod<
    [_projectId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  stakingToken: TypedContractMethod<[], [string], "view">;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  userRewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userStakes: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { projectId: bigint; amount: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateReward"
  ): TypedContractMethod<
    [user: AddressLike, projectId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributeRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getProjectStakers"
  ): TypedContractMethod<[_projectId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getProjectTotalStaked"
  ): TypedContractMethod<[_projectId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "projectStakers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stakeOnProject"
  ): TypedContractMethod<
    [_projectId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userRewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userStakes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { projectId: bigint; amount: bigint }],
    "view"
  >;

  getEvent(
    key: "ProjectStaked"
  ): TypedContractEvent<
    ProjectStakedEvent.InputTuple,
    ProjectStakedEvent.OutputTuple,
    ProjectStakedEvent.OutputObject
  >;

  filters: {
    "ProjectStaked(address,uint256,uint256)": TypedContractEvent<
      ProjectStakedEvent.InputTuple,
      ProjectStakedEvent.OutputTuple,
      ProjectStakedEvent.OutputObject
    >;
    ProjectStaked: TypedContractEvent<
      ProjectStakedEvent.InputTuple,
      ProjectStakedEvent.OutputTuple,
      ProjectStakedEvent.OutputObject
    >;
  };
}
